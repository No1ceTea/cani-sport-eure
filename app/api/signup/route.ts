// Importation des modules n√©cessaires
import { NextResponse } from "next/server"; // Pour g√©rer les r√©ponses d'API
import { createClient } from "@supabase/supabase-js"; // Client Supabase
import { Agent } from "http"; // Module HTTP (importation non utilis√©e)

// Initialisation du client Supabase avec les variables d'environnement
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY! // Cl√© avec privil√®ges d'administration
);

// Fonction pour g√©rer les requ√™tes POST (inscription)
export async function POST(req: Request) {
  try {
    console.log("üîπ Requ√™te re√ßue dans l'API Next.js");

    // Extraction des donn√©es du corps de la requ√™te
    const { email, password, first_name, last_name } = await req.json();
    console.log("üì© Donn√©es re√ßues :", { email, first_name, last_name });

    // √âtape 1: Appel de l'Edge Function Supabase pour cr√©er l'utilisateur
    const response = await fetch(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/functions/v1/validate-signup`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY}`, // Authentification avec droits admin
      },
      body: JSON.stringify({ email, password, first_name, last_name }),
    });

    // R√©cup√©ration et log de la r√©ponse
    const data = await response.json();
    console.log("üì° R√©ponse de Supabase :", data);

    // Gestion des erreurs de l'Edge Function
    if (!response.ok) {
      console.error("‚ùå Erreur de Supabase :", data.error);
      return NextResponse.json({ error: data.error }, { status: response.status });
    }

    // V√©rification de la pr√©sence de l'ID utilisateur
    if (!data.userId) {
      console.error("‚ùå Aucun ID utilisateur re√ßu.");
      return NextResponse.json({ error: "Erreur lors de la r√©cup√©ration de l'utilisateur." }, { status: 500 });
    }

    const userId = data.userId;
    console.log("‚úÖ ID utilisateur re√ßu :", userId);

    // √âtape 2: Cr√©ation du profil utilisateur dans la table personnalis√©e
    const { error: profileError } = await supabase.from("profils").insert([
      {
        id: userId, // Association avec l'ID de l'utilisateur dans Auth
        created_at: new Date().toISOString(),
        nom: last_name,
        prenom: first_name,
        email: email,
      },
    ]);

    // Gestion des erreurs de cr√©ation de profil
    if (profileError) {
      console.error("‚ùå Erreur lors de l'ajout du profil :", profileError);
      return NextResponse.json({ error: "Erreur lors de l'ajout du profil." }, { status: 500 });
    }

    // R√©ponse de succ√®s
    console.log("‚úÖ Inscription et profil cr√©√©s avec succ√®s !");
    return NextResponse.json({ message: "Inscription r√©ussie !" }, { status: 200 });

  } catch (error) {
    // Gestion des erreurs g√©n√©rales
    console.error("‚ùå Erreur dans l'API /api/signup :", error);
    return NextResponse.json({ error: "Erreur lors de l'inscription." }, { status: 500 });
  }
}
